---
// work page includes apart from basic info on the work (found in works.json) also info on the 
// manuscript transmission of the work (found in ms_items.json) 
// which are dated by the hands that worked on it (found in hands.json)
// so we need to match all three json together to get the info we need

import PageLayout from "@/layouts/page-layout.astro";
import NavLink from "@/components/nav-link.astro";
import { Icon } from "astro-icon/components";
import Article from "@/components/article.astro";
import new_works from "@/content/data/new_works.json"

export async function getStaticPaths() {
	
const works = Object.values(new_works);
	const paths = works.map((work) => {
		const workId = work.hit_id;

		return {
			params: { id: workId },
			props: { data: work }, 
		};
	});

	return paths;
}

const { data: work } = Astro.props;
---

<PageLayout title={work?.title}>
	
	<Article
		prevLink={`/works/${work.prev.id}`}
		nextLink={`/works/${work.next.id}`}
		mainTitle={
			work.author.length > 0
			  ? work.author.map((item) => item.name).join(', ') + ': ' + work.title
			  : work?.title
		  }
		 > 
		
		<div
			class="border-2 rounded-sm border-brandBrown bg-brandRose
			text-sm md:leading-7 md:text-base"
		>
			<section class="m-5 overflow-x-auto" aria-labelledby="workInfo">
				<h2 id="workInfo" class="text-xl font-semibold text-brandRed mb-5">Allgemeine Info zum Werk:</h2>
					<dl class="grid grid-cols-[1fr_6fr]">
						<dt class="font-semibold border-r border-gray-300 pr-2">Titel:</dt>
						<dd class="pl-5">
							{work?.title}
						</dd>
						<dt class="font-semibold border-r border-gray-300 pr-2">Author:</dt>
						<dd class="pl-5">
							{
								work?.author.length > 1
									? work.author.map((item) => (
											<>
												<NavLink
													href={item.gnd_url}
													class="hover:text-brandRed underline decoration-dotted underline-offset-4"
												>
													{item.name}
													<Icon aria-hidden="true" name="lucide:external-link" class="inline-flex align-baseline"/>
												</NavLink>
												<br />
											</>
										))
									: work.author.map((item) => (
											<NavLink
												href={item.gnd_url}
												class="hover:text-brandRed underline decoration-dotted underline-offset-4"
											>
												{item.name}
												<Icon aria-hidden="true" name="lucide:external-link" class="inline-flex align-baseline"/>
											</NavLink>
										))
							}
						</dd>
						<dt class="font-semibold border-r border-gray-300 pr-2">Bibliographie:</dt>
						<dd class="pl-5">
							{work.bibliography.length > 0 ? work.bibliography.map((item) => item) : "N/A"}
						</dd>
						<dt class="font-semibold border-r border-gray-300 pr-2">GND:</dt>
						<dd class="pl-5">
							{
								work?.gnd_url ? (
									<NavLink href={work.gnd_url} 
									class="hover:text-brandRed underline decoration-dotted underline-offset-4">
										{work.gnd_url.split("gnd/")[1]}
										<Icon
											class="inline-flex align-baseline"
											aria-hidden="true"
											name="lucide:external-link"
										/>
									</NavLink>
								) : (
									"N/A"
								)
							}
						</dd>
						<dt class="font-semibold border-r border-gray-300 pr-2">Quelle:</dt>
						<dd class="pl-5">
							{
								work.source_text.length > 0
									? work.source_text.map((text) => (
											<NavLink href={`/works/${text.hit_id}`} 
											>
												{text.title}
											</NavLink>
										))
									: "N/A"
							}
							{work.note_source ? <span>({work.note_source})</span> : ""}
						</dd>
						<dt class="font-semibold border-r border-gray-300 pr-2">Genre:</dt>
						<dd class="pl-5">
							{
								work.genre.length > 0
									? work.genre.map((item, index) => {
											return (
												<>
													{item.main_genre.length > 0 &&
														item.main_genre.map((item) => `${item}: `)}
													{item.value}
													{index < work.genre.length - 1 && " | "}
												</>
											);
										})
									: "N/A"
							}
						</dd>
						{work.source_text.length > 0 &&
							<dt class="font-semibold border-r border-gray-300 pr-2">Quelle:</dt>
							<dd class="pl-5">
								{work.source_text.map((item, index) => {
												return (
													<>
														{item.author.length > 0 &&
															`${item.author}: `}
														{item.title}
														{index < work.genre.length - 1 && " | "}
													</>
												);
											})
										}
							</dd>
									}
					</dl>
			</section>

			{work.ms_transmission.length > 0 && (
			<section class="m-5 overflow-x-auto" aria-labelledby="transmission">
				<h2 id="transmission" class="text-xl font-semibold text-brandRed mb-5">Ãœberlieferung:</h2>
				<table
					class="w-full shadow-sm border-1 border-brandRed lg:leading-7 text-sm lg:text-base data-table"
				>
					<thead class="bg-brandRoseDark">
						<tr>
							<th rowspan="2" class="text-start p-2 font-semibold border border-gray-300">Handschrift</th>
							<th rowspan="2" class="text-start p-2 font-semibold border border-gray-300">Locus</th>
							{work.ms_transmission.some((item) => item.role !== undefined) && (
								<th rowspan="2" class="text-start p-2 font-semibold border border-gray-300">Role</th>)}
							<th rowspan="2" class="text-start p-2 font-semibold border border-gray-300">Schreibort</th>
							<th rowspan="2" class="text-start p-2 font-semibold border border-gray-300">Datierung</th>
							<th colspan="2" class="text-center p-2 font-semibold border border-gray-300">Annotationen</th>
							<th rowspan="2" class="text-start p-2 font-semibold border border-gray-300">Dekoration</th>
						</tr>
						<tr>
							<th class="text-center p-2 font-semibold border border-gray-300">Datierung</th>
							<th class="text-center p-2 font-semibold border border-gray-300">Typ</th>
						</tr>
					</thead>

					<tbody>
						{
							work.ms_transmission.map((item) => (
								<tr class="odd:bg-brandIvory even:bg-brandRose">
									<td class="p-2 border border-gray-300">
										<NavLink href={`/manuscripts/hit_manuscripts__${item.manuscript[0].id}`}>
											{item.manuscript[0].value}
										</NavLink>
									</td>
									<td class="p-2 border border-gray-300">
										<NavLink  href={`/msitems/${item.hit_id}`}>
											{item.locus}
										</NavLink>
									</td>
									{item?.role !== undefined && (
										<td class="p-2 border border-gray-300">
										{item.role}
										{item.function.length > 0 &&
											<>
												({item.function})
											</>
										}
										{item.commented_msitem.length > 0 && (
											<ul class="list-disc list-inside">
												{item.commented_msitem
												.map((msitem) => (
													<li>
														<NavLink href={`/msitems/${msitem.hit_id}`}>
															{msitem.title}
														</NavLink>
													</li>
												))}
											</ul>
)}

									</td>
									)}
									<td class="p-2 border border-gray-300">{item.orig_place.map(p => p.place.map(pl => pl.value))}</td>
									<td class="p-2 border border-gray-300">
										{[...new Set(item.orig_date.flatMap(oDat => oDat.date.map(d => d.value)))].join(' | ')}
									</td>
									<td class="p-2 border border-gray-300">
										{item.annotation_date.map(anDat => anDat.date.map(d => d.value)).join(' | ')}
									</td>
									<td class="p-2 border border-gray-300">
										{item.annotation_typ}
									</td>
									<td class="p-2 border border-gray-300">
										{item.decoration}
									</td>
								</tr>
							))
						}
					</tbody>
				</table>
			</section>
			)}
		</div>
	</Article>
</PageLayout>
