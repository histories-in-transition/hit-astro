---
import PageLayout from "@/layouts/page-layout.astro";
import { Icon } from "astro-icon/components";
import Article from "@/components/article.astro";
import NavLink from "@/components/nav-link.astro";

import msitems from "@/content/data/ms_items.json";

export async function getStaticPaths() { 
  const msItemsList = Object.values(msitems);
 
  const paths = msItemsList.map((item) => {
    const msItemId = item.hit_id;
   
    return {
      params: { id: msItemId }, 
      props: { data: item }
    }
  });

  return paths;
}
       
const { data: item } = Astro.props;

---

<PageLayout title={item.view_label}>
  
  <Article
          prevLink={`/msitems/${item.prev.id}`}
          nextLink={`/msitems/${item.next.id}`}
          mainTitle={item.library_place.map(p => p.value) + ', ' + item.view_label}
          authorEntry={item.author_entry}
        > 
      <div
        class="border-2 rounded-sm border-brandBrown bg-brand-100
        text-sm md:leading-7 md:text-base"
      >
        <section aria-labelledby="msitemInfo" class="m-5">
          <h2 id="msitemInfo" class="text-xl font-semibold text-brand-800">Allgemeine Info über das MS Element
            
          </h2>
          <dl class="grid grid-cols-[1fr_6fr] p-5">
            <dt class="font-semibold border-r border-gray-300 pr-2">Handschrift:</dt>  
            <dd class="pl-5">
              <NavLink href={`/manuscripts/hit_manuscript__${item.manuscript[0]?.id}`} >
                {item.library_place.map(p => p.value) + ', ' + item.manuscript[0]?.value}
              </NavLink>
            </dd>
            <dt class="font-semibold border-r border-gray-300 pr-2">Locus:</dt>  
            <dd class="pl-5">{item.locus}</dd>
            <dt class="font-semibold border-r border-gray-300 pr-2">Titel:</dt>
              <dd class="pl-5">
                {item.title_work?.map((title) => (
                 title.hit_id
                 ? <NavLink href={`/works/${title?.hit_id}`} 
                      >{title.title}
                  </NavLink>
                  : title.title)
                )}
              </dd>
             {item.title_work?.some((title: any) => title.author?.length > 0) &&
                <dt class="font-semibold border-r border-gray-300 pr-2">Author:</dt>
                <dd class="pl-5">{item.title_work?.map((title:any) => title.author.map((aut: any) => 
                  aut.gnd_url !== '' ?
                  <NavLink href={aut.gnd_url} target="_blank"
                      >{aut.name}
                      <Icon
                                class="inline-flex align-middle"
                                aria-hidden="true"
                                name="lucide:external-link"
                              />
                  </NavLink>
                  :
                  <span>{aut.name}</span>
                  ))}</dd>
              }
              {item.title_note &&
              <dt class="font-semibold border-r border-gray-300 pr-2">Bemerkung:</dt>
              <dd class="pl-5">{item?.title_note}</dd>
              }
              {item?.rubric &&
              <dt class="font-semibold border-r border-gray-300 pr-2">Rubrik:</dt>
               <dd class="pl-5">
                  {/* check for [text in square brackets] should be not-italic */}
                  ›{item.rubric.split(/(\[ *.*?\])/).map((part) =>
                    part.startsWith('[') && part.endsWith(']')
                      ? <span class="not-italic">{part}</span> // Non-italic for bracketed text
                      : <span class="italic">{part}</span> // Italic for other text
                  )}‹
                </dd>}
              {item.incipit &&
                <dt class="font-semibold border-r border-gray-300 pr-2">Incipit:</dt>
                <dd class="pl-5 italic">
                    {item.incipit.split(/(\[ *.*?\])/).map((part) =>
                      part.startsWith('[') && part.endsWith(']')
                        ? <span class="not-italic">{part}</span> // Non-italic for bracketed text
                        : <span class="italic">{part}</span> // Italic for other text
                    )}
                    {item.incipit.trim().endsWith('…') ? '' : '…'}
                  </dd>}
              {item.explicit &&
                <dt class="font-semibold border-r border-gray-300 pr-2">Explicit:</dt>
                <dd class="pl-5 italic">
                  {item.explicit.split(/(\[.*?\])/).map((part) =>
                    part.startsWith('[') && part.endsWith(']')
                      ? <span class="not-italic">{part}</span> // Non-italic for bracketed text
                      : <span>{part}</span> // Italic for other text
                  )}
                  {item.explicit.trim().startsWith('…') ? '' : '…'}
                </dd>}
              {item?.final_rubric &&
                <dt class="font-semibold border-r border-gray-300 pr-2">Final Rubrik:</dt>
                 <dd class="pl-5">
                    {/* check for [text] shouldl be not-italic */}
                    ›{item.final_rubric.split(/(\[ *.*?\])/).map((part) =>
                      part.startsWith('[') && part.endsWith(']')
                        ? <span class="not-italic">{part}</span> // Non-italic for bracketed text
                        : <span class="italic">{part}</span> // Italic for other text
                    )}‹
                  </dd>}
              { item.decoration.length > 0 &&
                <dt class="font-semibold border-r border-gray-300 pr-2">Dekoration:</dt>
                <dd class="pl-5">{item?.decoration.map(d => d.value).join(', ')}</dd>
              }
            <dt class="font-semibold border-r border-gray-300 pr-2">Schreiberhände:</dt>
              <dd class="pl-5">
                {item.hands.map(hand => hand.jobs.length > 0) && 
                item.hands
                // filter hands with jobs.role 'Schreiber'
                .filter(hand => hand.jobs.some(h_job => h_job.role.some(r => r.value ==='Schreiber')))
                .map(filteredHand => {
                  return <ul>
                          <li>
                            <NavLink href={`/hands/${filteredHand.hit_id}`}>
                              {filteredHand.label}
                            </NavLink>

                            {(filteredHand.place.length > 0 || 
                              filteredHand.dating.length > 0 || 
                              filteredHand.jobs.some(j => j.role_context.length > 0)) && 
                              <span> 
                                <Icon class="inline-flex align-middle" aria-hidden="true" name="lucide:arrow-right" />                               
                                {filteredHand.place.length > 0 && 
                                  filteredHand.place.map(pl => 
                                    pl.place?.map(place => place.value).join(', ')
                                  ).join('; ')}

                                {filteredHand.dating?.length > 0 && 
                                  `| ${filteredHand.dating.map(d => 
                                    d.date?.map(date => date.value).join(', ')
                                  ).join('; ')}`}

                                {filteredHand.jobs.some(j => j.role_context.length > 0) && 
                                  `| ${filteredHand.jobs.flatMap(job => 
                                    job.role_context.map(rc => rc.value)
                                  ).join(', ')}`}
                                
                              </span>
                            }
                          </li>

                  </ul>
          
                })}
              </dd>
              {item.commentedMsItem.length > 0 &&              
              <dt class="font-semibold border-r border-gray-300 pr-2">Bezug zu anderen Texten:</dt>
              <dd class="pl-5">               
                {item.commentedMsItem
                .map(i => 
                  <NavLink href={`/msitems/${i.hit_id}`}>{i.title}</NavLink>)}
              </dd>
              }
             
            </dl>
        </section>

        {item.hands.some(hand => hand.jobs.some(job => !job.role.some(r => r.value ==='Schreiber'))) &&
              
          <section aria-labelledby="msitemRework"  class="overflow-x-auto m-5">            
             <h2 id="msitemRework" class="text-xl font-semibold text-brand-800 mb-5">Bearbeitungsschritte</h2>
            <table class="w-full bg-brand-100 shadow-xs border border-gray-300 lg:leading-7 text-sm lg:text-base data-table p-5">
              <thead class="bg-brand-300">
                <tr> 
                  <th class="text-start p-2 font-semibold border border-gray-300">Bearbeitungsart</th>
                  <th class="text-start p-2 font-semibold border border-gray-300">Schreiberhand</th>    
                  <th class="text-start p-2 font-semibold border border-gray-300">Schreiber</th> 
                  <th class="text-start p-2 font-semibold border border-gray-300">Datierung</th> 
                  <th class="text-start p-2 font-semibold border border-gray-300">Umfang</th> 
                  <th class="text-start p-2 font-semibold border border-gray-300">Mise-en-page</th> 
                  <th class="text-start p-2 font-semibold border border-gray-300">Typ</th>
                  <th class="text-start p-2 font-semibold border border-gray-300">Funktion</th>
                </tr>
              </thead>
              <tbody>
                {item.hands
                  .filter(hand => hand.jobs.some(j => !j.role.some(r => r.value ==='Schreiber')))
                  .map(filteredHand => (
                      <tr>
                                <td class="p-2 border border-gray-300">{filteredHand.jobs.flatMap(j => j.role.map(r => r.value).join(', ')).join(', ')}</td>
                                <td class="p-2 border border-gray-300">
                                  <NavLink href={`/hands/${filteredHand.hit_id}`}>
                                  {filteredHand.label}</NavLink>
                                </td>
                                <td class="p-2 border border-gray-300">
                                  {filteredHand.scribe.length > 0
                                    ? filteredHand.scribe.map(scr => scr.value).join(', ')
                                  : 'N/A'}
                                  </td>
                                <td class="p-2 border border-gray-300">{filteredHand.dating.flatMap(d => d.date.map(date => date.value))}</td>
                                <td class="p-2 border border-gray-300">{filteredHand.jobs.map(j => j?.locus).join(', ')}</td>
                                <td class="p-2 border border-gray-300">{filteredHand.jobs.flatMap(j => j.locus_layout.map(ll => ll.value))}</td>
                                <td class="p-2 border border-gray-300">{filteredHand.jobs.flatMap(j => j.role_context.map(rc => rc.value))}</td>
                                <td class="p-2 border border-gray-300">{filteredHand.jobs.map(j => j.function?.map(f => f.value))}</td>
                            </tr>
                          ))
                        }         

              </tbody>
                
            </table>
          </section>
      }
      </div>
  </Article>
</PageLayout>