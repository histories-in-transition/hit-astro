---
import PageLayout from "@/layouts/page-layout.astro";
import { Icon } from "astro-icon/components";
import Article from "@/components/article.astro";
import NavLink from "@/components/nav-link.astro";

import msitems from "@/content/data/ms_items.json";
import handsJson from "@/content/data/hands.json";

export async function getStaticPaths() { 
  const hands = Object.values(handsJson);
  const msItemsList = Object.values(msitems);
 
  const paths = msItemsList.map((item) => {
    const msItemId = item.hit_id;

    // Find matching hands based on the msItemId
    const matchingHands = hands.filter(hand => {
      return hand.hands_role.some(handRole =>
        handRole.ms_item.some((item: any) => item.hit_id === msItemId)
      )
    })
    return {
      params: { id: msItemId }, 
      props: { data: item, hands: matchingHands }
    }
  });

  return paths;
}
       
const { data: item, hands: matchingHands } = Astro.props;

---

<PageLayout title={`${item.manuscript[0].shelfmark[0].value}, ${item.locus_grp}`}>
  <style>
    /* To make the table rows striped */
    tbody tr:nth-child(even) {
      background-color: #fcf1e8;
    }
    tbody tr:nth-child(odd) {
      background-color: #fff8f7;
    }
   
  </style>
  <Article
          prevLink={`/msitems/${item.prev.id}`}
          nextLink={`/msitems/${item.next.id}`}
          mainTitle={`${item.manuscript[0]?.shelfmark[0].value}, ${item?.locus_grp}`}
        > 
      <div
        class="border-2 rounded-sm border-brandBrown bg-brandRose
        text-sm md:leading-7 md:text-base"
      >
        <section aria-labelledby="msitemInfo" class="m-5">
          <h2 id="msitemInfo" class="text-xl font-semibold text-brandRed">Allgemeine Info über das MS Element
            
          </h2>
          <dl class="grid grid-cols-[1fr_6fr] p-5">
            <dt class="font-semibold border-r border-gray-300 pr-2">Handschrift:</dt>  
            <dd class="pl-5">
              <NavLink href={`/manuscripts/${item.manuscript[0]?.hit_id}`} >
                {item.manuscript[0]?.shelfmark[0].value}
              </NavLink>
            </dd>
            <dt class="font-semibold border-r border-gray-300 pr-2">Locus:</dt>  
            <dd class="pl-5">{item.locus_grp}</dd>
            <dt class="font-semibold border-r border-gray-300 pr-2">Titel:</dt>
              <dd class="pl-5">
                {item.title_work?.map((title: any) => 
                  <NavLink href={`/works/${title?.hit_id}`} 
                      >{title.title}
                  </NavLink>
                )}
              </dd>
             {item.title_work?.some((title: any) => title.author.length > 0) &&
                <dt class="font-semibold border-r border-gray-300 pr-2">Author:</dt>
                <dd class="pl-5">{item.title_work?.map((title:any) => title.author.map((aut: any) => 
                  
                  <NavLink href={aut.gnd_url} 
                      >{aut.name}
                      <Icon
                                class="inline-flex align-middle"
                                aria-hidden="true"
                                name="lucide:external-link"
                              />
                  </NavLink>
                  ))}</dd>
              }
              {item.title_note &&
              <dt class="font-semibold border-r border-gray-300 pr-2">Bemerkung:</dt>
              <dd class="pl-5">{item?.title_note}</dd>
              }
              {item?.rubric &&
              <dt class="font-semibold border-r border-gray-300 pr-2">Rubrik:</dt>
               <dd class="pl-5">
                  {/* check for [text in square brackets] should be not-italic */}
                  ›{item.rubric.split(/(\[ *.*?\])/).map((part) =>
                    part.startsWith('[') && part.endsWith(']')
                      ? <span class="not-italic">{part}</span> // Non-italic for bracketed text
                      : <span class="italic">{part}</span> // Italic for other text
                  )}‹
                </dd>}
              {item.incipit &&
                <dt class="font-semibold border-r border-gray-300 pr-2">Incipit:</dt>
                <dd class="pl-5 italic">
                    {item.incipit.split(/(\[ *.*?\])/).map((part) =>
                      part.startsWith('[') && part.endsWith(']')
                        ? <span class="not-italic">{part}</span> // Non-italic for bracketed text
                        : <span class="italic">{part}</span> // Italic for other text
                    )}
                    {item.incipit.trim().endsWith('…') ? '' : '…'}
                  </dd>}
              {item.explicit &&
                <dt class="font-semibold border-r border-gray-300 pr-2">Explicit:</dt>
                <dd class="pl-5 italic">
                  {item.explicit.split(/(\[.*?\])/).map((part) =>
                    part.startsWith('[') && part.endsWith(']')
                      ? <span class="not-italic">{part}</span> // Non-italic for bracketed text
                      : <span>{part}</span> // Italic for other text
                  )}
                  {item.explicit.trim().startsWith('…') ? '' : '…'}
                </dd>}
              {item?.final_rubric &&
                <dt class="font-semibold border-r border-gray-300 pr-2">Final Rubrik:</dt>
                 <dd class="pl-5">
                    {/* check for [text] shouldl be not-italic */}
                    ›{item.final_rubric.split(/(\[ *.*?\])/).map((part) =>
                      part.startsWith('[') && part.endsWith(']')
                        ? <span class="not-italic">{part}</span> // Non-italic for bracketed text
                        : <span class="italic">{part}</span> // Italic for other text
                    )}‹
                  </dd>}
              { item.decoration.length > 0 &&
                <dt class="font-semibold border-r border-gray-300 pr-2">Dekoration:</dt>
                <dd class="pl-5">{item?.decoration.map(deco => deco.value).join(', ')}</dd>
              }
            <dt class="font-semibold border-r border-gray-300 pr-2">Schreiberhände:</dt>
              <dd class="pl-5">
                {item.hands_role.map(role => role.hand.length > 0) && 
                item.hands_role
                .filter(hand_role => hand_role.role.some(ro => ro.value == 'Schreiber'))
                .map(filteredRole => {
                  return <ul>
                          <li>
                            <NavLink 
                              href={`/hands/hit_hands__${filteredRole.hand[0].id}`}>{filteredRole.hand[0].value}
                            </NavLink>
                            <span>
                              <Icon
                                class="inline-flex align-middle"
                                aria-hidden="true"
                                name="lucide:arrow-right"
                              />
                             {/* need to get the dating for the han from hands.json */}
                              {matchingHands
                                  .filter(hand => hand.hands_role
                                      .some(role => role.hit_id === filteredRole.hit_id))
                                  .map(hand => hand.hands_dated.map(dating => dating.dated.map(date => date.label)))}
                            </span>
                          </li>
                  </ul>
          
                })}
              </dd>
            </dl>
        </section>

        {item.hands_role
              .some((hand_role: any) => hand_role.role.some((ro: any) => ro.value != 'Schreiber')) &&
          <section aria-labelledby="msitemRework"  class="overflow-x-auto m-5">            
             <h2 id="msitemRework" class="text-xl font-semibold text-brandRed mb-5">Bearbeitungsschritte</h2>
            <table class="w-full bg-brandRose shadow-sm border border-gray-300 lg:leading-7 text-sm lg:text-base data-table p-5">
              <thead class="bg-brandRoseDark">
                <tr> 
                  <th class="text-start p-2 font-semibold border border-gray-300">Bearbeitungsart</th>
                  <th class="text-start p-2 font-semibold border border-gray-300">Schreiberhand</th>    
                  <th class="text-start p-2 font-semibold border border-gray-300">Schreiber</th> 
                  <th class="text-start p-2 font-semibold border border-gray-300">Datierung</th> 
                  <th class="text-start p-2 font-semibold border border-gray-300">Umfang</th> 
                  <th class="text-start p-2 font-semibold border border-gray-300">Mise-en-page</th> 
                  <th class="text-start p-2 font-semibold border border-gray-300">Funktion</th> 
                </tr>
              </thead>
              <tbody>
                {item.hands_role
                  .filter(hand_role => hand_role.role.some(ro => ro.value != 'Schreiber'))
                  .map(filteredRole => {
                    return  <tr>
                                <td class="p-2 border border-gray-300">{filteredRole.role.map(rol => rol.value).join(', ')}</td>
                                <td class="p-2 border border-gray-300">
                                  <NavLink class="hover:text-brandRed" href={`/hands/hit_hands__${filteredRole.hand[0].id}`}>
                                  {filteredRole.hand[0].value}</NavLink>
                                </td>
                                <td class="p-2 border border-gray-300">{matchingHands
                                      .filter(hand => hand.hands_role
                                          .some(role => role.hit_id === filteredRole.hit_id))
                                      .map(hand => hand.scribe.map(scr => scr.name))}
                                </td>
                                <td class="p-2 border border-gray-300">{matchingHands
                                      .filter(hand => hand.hands_role
                                          .some(role => role.hit_id === filteredRole.hit_id))
                                      .map(hand => hand.hands_dated.map(dating => dating.dated.map(date => date.label)))}
                                </td>
                                <td class="p-2 border border-gray-300">{filteredRole.locus}</td>
                                <td class="p-2 border border-gray-300">{filteredRole.locus_layout.map(layout => layout.value).join(', ')}</td>
                                <td class="p-2 border border-gray-300">{filteredRole.function.map(func => func.value).join(', ')}</td>
                            </tr>
                          })
                        }         

              </tbody>
                
            </table>
          </section>
      }
      </div>
  </Article>
</PageLayout>