---
import {Icon} from "astro-icon/components";
import PageLayout from "../../layouts/page-layout.astro";
import Button from "../../components/button.astro"
import manuscripts from "../../content/data/manuscripts.json";
import msItems from "../../content/data/ms_items.json";
import NavLink from "../../components/nav-link.astro";
import strata from "../../content/data/strata.json"

export async function getStaticPaths() {
    const items = Object.values(msItems);
    
    const paths = Object.values(manuscripts).map((manuscript) => {
      const id = manuscript.hit_id
      const matchingMsItems = items.filter((item) => {
      return item.manuscript.some((ms) => ms.hit_id === id);
    });
      return {
        params: {id: manuscript.hit_id},
        props: {data: manuscript, msItem: matchingMsItems}
      }
    });

    return paths; 
}

const { data: manuscript, msItem: matchingMsItems } = Astro.props;

const codUnits = manuscript.related__cod_units ;

---

<PageLayout title={manuscript?.shelfmark[0]?.value}>
    <div>
        <article class="w-full md:w-3/4 grid grid-cols-1 mx-auto p-5 my-10 gap-y-2">
          <header class="flex items-center gap-3 text-brandRed">
            <NavLink href=`/manuscripts/${manuscript.prev.id}` class="flex items-center">
              <Icon
                aria-hidden="true"
                name="lucide:circle-chevron-left"
                class="text-3xl" 
              />
            </NavLink>
            <h1 class="text-3xl font-semibold py-3 text-brandRed">{manuscript?.shelfmark[0]?.value}</h1>
            <NavLink href=`/manuscripts/${manuscript.next.id}` class="flex items-center">
              <Icon
                aria-hidden="true"
                name="lucide:circle-chevron-right"
                class="text-3xl"
              />
            </NavLink>
          </header>
          
          
          <div class="flex gap-2 justify-end">
            <Button>TEI-XML</Button>
            <Button>PDF</Button>
          </div>
          <section>
            <h2 class="sr-only">Handschrift Identifier</h2>
            <dl class="border-2 rounded-sm border-brandBrown bg-brandRose grid grid-cols-[1fr_5fr] text-sm md:leading-7 md:text-base p-5">

              <dt class="font-semibold border-r border-gray-300 pr-2">Ort:</dt>
              <dd class="pl-5">{manuscript?.library_full[0]?.settlement[0]?.name}</dd>
              
              
              <dt class="font-semibold border-r border-gray-300 pr-2">Bibliothek:</dt>
              <dd class="pl-5"><NavLink href={manuscript?.library_full[0]?.gnd_url} target="_blank" class="hover:text-brandRed">{manuscript.library_full[0]?.library_full} <Icon class="inline-flex align-baseline" aria-hidden="true" name="lucide:external-link"></Icon></NavLink></dd>
              
              
              <dt class="font-semibold border-r border-gray-300 pr-2">Signatur:</dt>
              <dd class="pl-5">{manuscript?.idno}</dd>

              {manuscript.idno_former &&
              <dt class="font-semibold border-r border-gray-300 pr-2">Olim:</dt>
              <dd class="pl-5">{manuscript?.idno_former}</dd>}
            </dl>
          </section>
          <section>
            <h2 class="sr-only">Das Äuseres</h2>
            <dl class="border-2 rounded-sm border-brandBrown bg-brandRose grid grid-cols-[1fr_5fr] text-sm md:leading-7 md:text-base p-5">
              <dt class="font-semibold border-r border-gray-300 pr-2">Material:</dt>
              <dd class="pl-5">
                  {manuscript?.material?.value.includes("parchment") && <span>Pergament</span>}
                  {manuscript?.material?.value.includes("mixed") && <span>Mischung</span>}
                  {manuscript?.material?.value.includes("paper") && <span>Papier</span>}
                   {manuscript?.material_spec}</dd>
                   
              <dt class="font-semibold border-r border-gray-300 pr-2">Umfang:</dt>
              <dd class="pl-5">{manuscript?.extent} Bll.</dd> 

              <dt class="font-semibold border-r border-gray-300 pr-2">Maße:</dt>
              <dd class="pl-5">{manuscript?.height} × {manuscript?.width} mm</dd> 

              <dt class="font-semibold border-r border-gray-300 pr-2">Foliierung:</dt>
              <dd class="pl-5">{manuscript?.foliation ?? 'N/A'}</dd>

              {manuscript.quiremarks && (
                <dt class="font-semibold border-r border-gray-300 pr-2">Kustoden:</dt>
                <dd class="pl-5">{manuscript?.quiremarks}</dd>
               )} 
              {manuscript.catchwords && (
                   <dt class="font-semibold border-r border-gray-300 pr-2">Reklamanten:</dt>
                   <dd class="pl-5">{manuscript?.catchwords}</dd>
              )}
              <dt class="font-semibold border-r border-gray-300 pr-2">Lagenstruktur:</dt>
              <dd class="pl-5">
                {manuscript.quire_structure && (
                   <span set:html={manuscript?.quire_structure}></span>
                )}
              </dd>
              
              <dt class="font-semibold border-r border-gray-300 pr-2">Einband:</dt>
              <dd class="pl-5">
                {manuscript?.binding_date.map(date => (
                  <span>{date?.value}</span>
                ))}
                {manuscript?.binding}</dd>
              
                {manuscript?.acc_mat && (
                   <dt class="font-semibold border-r border-gray-300 pr-2">Fragmente:</dt>
                    <dd class="pl-5">
                  {manuscript?.acc_mat}
                </dd>
                )}
            </dl>
          </section>
            <section>
              <h2 class="sr-only">Geschichte</h2>
              <dl class="border-2 rounded-sm border-brandBrown bg-brandRose grid grid-cols-[1fr_5fr] text-sm md:leading-7 md:text-base p-5">
                <dt class="font-semibold border-r border-gray-300 pr-2">Herkunft:</dt>
                <dd class="pl-5">{manuscript?.history}</dd>
                <dt class="font-semibold border-r border-gray-300 pr-2">Herkunfsort:</dt>
                <dd class="pl-5">{manuscript?.orig_place.map(place => {
                  return place.name}).join(', ')</dd>
                <dt class="font-semibold border-r border-gray-300 pr-2">Provenienz:</dt>
                <dd class="pl-5">
                  {
                      manuscript?.provenance.map((entry, index) => (
                        <>
                          <NavLink href="/" class="hover:text-brandRed">
                            {entry.label}
                          </NavLink>
              
                          {index < manuscript.provenance.length - 1 && ', '}
                        </>
                      ))
                    }</dd>
                <dt class="font-semibold border-r border-gray-300 pr-2">Datierung:</dt>
                <dd class="pl-5">
                    {manuscript?.manuscripts_dated.length > 0 &&
                    <ul>
                      {manuscript.manuscripts_dated.map((date) => (
                        <li>{date.date[0].label} nach {date.authority[0].name} ({date.authority[0].short_title})</li>
                      ))}
                      </ul>}
                </dd>
                <dt class="font-semibold border-r border-gray-300 pr-2">Bibliographie:</dt>
                <dd class="pl-5">{manuscript?.bibliography}</dd>
              </dl>
            </section>          

            <section class="grid grid-cols-1 my-2 gap-y-2">
              <h2 class="sr-only">Inhalt</h2>
              {codUnits.map((unit) => (
                <dl class="border-2 rounded-sm border-brandBrown bg-brandRose grid grid-cols-[1fr_5fr] text-sm md:leading-7 md:text-base p-5">
                  <dt class="font-semibold border-r border-gray-300 pr-2">
                    {codUnits.length > 1 && `Codicological unit ${unit.number}`}</dt>
                  <dd class="pl-5"></dd>

                  {Object.values(msItems)
                    .filter(item => item.cod_unit.some(item_unit => item_unit.hit_id === unit.hit_id))
                    .sort((a, b) => {
                      const extractLocusValues = (locusGrp) => {
                        const match = locusGrp.match(/^(\d+)(r|v)/);
                        if (!match) return [0, 'z'];  // Default values for invalid format

                        const startNumber = parseInt(match[1], 10);
                        const startSuffix = match[2];

                        return [startNumber, startSuffix];
                      };

                      const [startA, suffixA] = extractLocusValues(a.locus_grp);
                      const [startB, suffixB] = extractLocusValues(b.locus_grp);

                      // Primary sorting by startNumber
                      if (startA !== startB) return startA - startB;

                      // If start numbers are the same, prioritize "r" over "v"
                      return suffixA === 'r' ? -1 : (suffixB === 'r' ? 1 : 0);
                    })
                    .map(filteredItem => (
                     
                        <dt class="border-r border-gray-300 pr-2 justify-self-end">{filteredItem.locus_grp}</dt>
                        <dd class="pl-5">
                          {filteredItem.title_work[0]?.title && (
                           <span class="font-semibold underline underline-offset-4 hover:text-brandRed">
                              <NavLink href={`/works/${filteredItem.title_work[0].hit_id}`}>
                                {filteredItem.title_work[0].title}
                              </NavLink>
                            </span>
                          )}
                          {filteredItem.title_note && <span>({filteredItem.title_note})</span>}
                          {filteredItem.rubric && (
                            <span> 
                              {/* check for [text] shouldl be not-italic */}
                              ›{filteredItem.rubric.split(/(\[ *.*?\])/).map((part) =>
                                part.startsWith('[') && part.endsWith(']')
                                  ? <span class="not-italic">{part}</span> // Non-italic for bracketed text
                                  : <span class="italic">{part}</span> // Italic for other text
                              )}‹
                            </span>
                          )}                          
                          
                          {filteredItem.incipit && (
                            <span>
                              {filteredItem.incipit.split(/(\[ *.*?\])/).map((part) =>
                                part.startsWith('[') && part.endsWith(']')
                                  ? <span class="not-italic">{part}</span> // Non-italic for bracketed text
                                  : <span class="italic">{part}</span> // Italic for other text
                              )}
                              {filteredItem.incipit.trim().endsWith('…') ? '' : '…'}
                            </span>
                          )}
                         {filteredItem.explicit && (
                            <span class="italic">
                              {filteredItem.explicit.split(/(\[.*?\])/).map((part) =>
                                part.startsWith('[') && part.endsWith(']')
                                  ? <span class="not-italic">{part}</span> // Non-italic for bracketed text
                                  : <span>{part}</span> // Italic for other text
                              )}
                              {filteredItem.explicit.trim().startsWith('…') ? '' : '…'}
                            </span>
                          )}

                          {filteredItem.final_rubric && 
                          <span class="italic">
                           ›{filteredItem.final_rubric.split(/(\[ *.*?\])/).map((part) =>
                                part.startsWith('[') && part.endsWith(']')
                                  ? <span class="not-italic">{part}</span> // Non-italic for bracketed text
                                  : <span class="italic">{part}</span> // Italic for other text
                              )}‹
                            </span>}

                          {filteredItem.decoration.length > 0 && <span>Ausstattung: {filteredItem.decoration.map(entry => entry.value).join(', ')}</span>}
                          
                        </dd>
                    ))}
                    </dl>
              ))}
          </section>
          <section>
            <h2>Strata</h2>

            {/* Make a table for strata. Each row to represent hand_role; 
            stratum || werk || fols || hand_role || hand || hand_dated || hand_placed */}
            {Object.values(strata)
             .filter(stratum => stratum.manuscript[0].id === manuscript.id)
             .map(filteredStrata => {
              return <dl class="border-2 rounded-sm border-brandBrown bg-brandRose grid grid-cols-[1fr_5fr] text-sm md:leading-7 md:text-base p-5">
                  <dt class="font-semibold border-r border-gray-300 pr-2">Stratum {filteredStrata.number}</dt>
                <dd></dd>
                <dt class="border-r border-gray-300 pr-2 justify-self-end">Typ</dt>
                <dd class="pl-5">{filteredStrata.character.map(char => char.value).join(', ')}</dd>
                <dt class="border-r border-gray-300 pr-2 justify-self-end">Notiz</dt>
                <dd class="pl-5">{filteredStrata.note}</dd>
                {filteredStrata.hand_role.map(entry => (
                  <dt class="border-r border-gray-300 pr-2 justify-self-end">Text</dt>
                  <dd class="pl-5">{entry.ms_item.map(item => item.title_work[0].title)}</dd>
                )
                )}
              </dl>
             })}
          </section>

           
    </article>
    </div>
</PageLayout>