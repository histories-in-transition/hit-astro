---
import PageLayout from "@/layouts/page-layout.astro";
import TableHead from "@/components/table-head.astro";
---

<PageLayout title="Strata">
	<TableHead title="Strata" definition="Provide definition for stratum here." />

	<script>
		import { TabulatorFull as Tabulator } from "tabulator-tables";
		import "tabulator-tables/dist/css/tabulator_semanticui.min.css";
		import data from "@/content/data/strata.json";
		import {
			jsonpathFlexibleLookup,
			jsonpathsDistinctLookup,
			dateRangeFilter,
			dateAccessor,
			dateFormatter,
		} from "@/lib/tabulator-utils.js";
		import { withBasePath } from "@/lib/withBasePath";

		// Wait for the page to load before initializing
		document.addEventListener("DOMContentLoaded", () => {
			var table = new Tabulator("#tabulator-table", {
				headerFilterLiveFilterDelay: 600,
				height: 900,
				data: data,
				layout: "fitColumns",
				responsiveLayout: "collapse",
				//initialSort: [{ column: "Handschrift", dir: "asc" }],
				columns: [
					{
						title: "Handschrift",
						field: "manuscript",
						headerFilterPlaceholder: "e.g. Clm. 6380",
						headerFilter: "input",
						mutator: jsonpathFlexibleLookup,
						mutatorParams: {
							path: [
								"$[*].library[*].place[*].value",
								"$[*].library[*].abbreviation",
								"$[*].shelfmark",
							],
							separator: ", ",
						},
						minWidth: 150,
						widthGrow: 2,
						responsive: 0,
					},
					{
						title: "Stratum",
						field: "number",
						headerFilterPlaceholder: "e.g. 1",
						minWidth: 80,
						headerFilter: "input",
						widthGrow: 1,
						responsive: 1,
					},

					{
						title: "Texte",
						field: "msitems",
						headerFilterPlaceholder: "e.g. Ostertafel",
						minWidth: 150,
						mutator: jsonpathFlexibleLookup,
						mutatorParams: { path: "$[*].w_aut", separator: "\n" },
						headerFilter: "input",
						formatter: "textarea",
						widthGrow: 3,
						responsive: 2,
					},
					{
						title: "Hände",
						field: "hands",
						headerFilterPlaceholder: "e.g. H. 1, H. 2",
						minWidth: 150,
						mutator: jsonpathsDistinctLookup,
						mutatorParams: {
							path: "$[*].label",
							separator: "\n",
						},
						headerFilter: "input",
						formatter: "textarea",
						widthGrow: 1,
						responsive: 2,
					},
					{
						title: "Datum",
						headerTooltip: "Datierung der beteiligten Hände",
						field: "date",
						headerFilterPlaceholder: "e.g. 850, nach 850",
						minWidth: 150,
						// Ensures filtering and sorting work correctly
						accessor: dateAccessor,
						// Formatting the displayed values
						formatter: dateFormatter,
						headerFilter: "input",
						headerFilterFunc: dateRangeFilter,
						responsive: 2,
					},
					{
						title: "Ort",
						field: "place",
						headerFilterPlaceholder: "e.g. Reims",
						minWidth: 150,
						mutator: jsonpathFlexibleLookup,
						mutatorParams: { path: "$[*].value", separator: "\n" },
						headerFilter: "input",
						formatter: "textarea",
						responsive: 2,
					},
				],
			});

			//trigger download of data.csv file
			document.getElementById("download-csv")!.addEventListener("click", function () {
				table.download("csv", "data.csv");
			});

			//trigger download of data.json file
			document.getElementById("download-json")!.addEventListener("click", function () {
				table.download("json", "data.json");
			});

			//trigger download of data.html file
			document.getElementById("download-html")!.addEventListener("click", function () {
				table.download("html", "data.html", { style: true });
			});

			// event listeners set:
			// href to the work detail view page
			table.on("rowClick", function (e, row) {
				var data = row.getData();
				var url = withBasePath(`/works/${data["hit_id"]}`);
				window.open(url, "_self");
			});

			table.on("dataLoaded", function (data) {
				var el = document.getElementById("counter1");
				if (el) {
					el.innerHTML = `${data.length}`;
				}
				var el = document.getElementById("counter2");
				if (el) {
					el.innerHTML = `${data.length}`;
				}
			});

			table.on("dataFiltered", function (filters, data) {
				var el = document.getElementById("counter1");
				if (el) {
					el.innerHTML = `${data.length}`;
				}
				// Extract raw data from each RowComponent
				const filteredData = data.map((row) => row.getData());

				// Extract hit_ids from filtered data
				const filteredHitIds = filteredData.map((row) => row.hit_id);

				// Update the map with the filtered hit_ids
				if (window.updateMapWithFilteredIds) {
					window.updateMapWithFilteredIds(filteredHitIds);
				} else {
					console.warn("Map update function not available");
				}
			});
		});
	</script>
</PageLayout>
