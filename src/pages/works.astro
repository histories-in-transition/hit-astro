---
import PageLayout from "@/layouts/page-layout.astro";
import TableHead from "@/components/table-head.astro";
import MapLeaf from "@/components/map-leaflet-copy.jsx";
import data from "@/content/data/works.json";
import { processWorksData } from "@/lib/make-geojson.js";
---

<PageLayout title="Works">
	<TableHead title="Werke">
		<MapLeaf client:only="react" geoJsonData={processWorksData(data)} />
	</TableHead>

	<script>
		import { TabulatorFull as Tabulator } from "tabulator-tables";
		import "tabulator-tables/dist/css/tabulator_semanticui.min.css";
		import data from "@/content/data/works.json";
		import {
			jsonpathFlexibleLookup,
			jsonpathsDistinctLookup,
			dateRangeFilter,
			dateAccessor,
			dateFormatter,
		} from "@/lib/tabulator-utils.js";
		import { withBasePath } from "@/lib/withBasePath";

		const tabledata = Object.values(data).map((work) => {
			// orig_Date and orig_place are both in ms_transmission
			// so need to extract them to Map (for unique deep objects) to acces in tabulator
			return {
				...work,
				origDate: [
					...new Map(
						work.ms_transmission
							.flatMap((ms) => ms.orig_date.flatMap((d) => d.date))
							.map((date) => [date.id, date]), // Use ID as a unique key
					).values(),
				],
				// create a Map with orig_place
				origPlace: [
					...new Map(
						work.ms_transmission
							.flatMap((ms) => ms.orig_place.flatMap((p) => p.place))
							.map((place) => [place.id, place]),
					).values(),
				],
				// create a Map with provenance places
				provenance: [
					...new Map(
						work.ms_transmission.flatMap((ms) => ms.provenance.map((place) => [place.id, place])),
					).values(),
				],
			};
		});
		console.log(tabledata);
		// Wait for the page to load before initializing
		document.addEventListener("DOMContentLoaded", () => {
			var table = new Tabulator("#tabulator-table", {
				headerFilterLiveFilterDelay: 600,
				height: 900,
				data: tabledata,
				layout: "fitColumns",
				responsiveLayout: "collapse",
				initialSort: [{ column: "title", dir: "asc" }],
				columns: [
					{
						title: "Titel",
						field: "title",
						headerFilterPlaceholder: "e.g. De temporum ratione",
						headerFilter: "input",
						formatter: "textarea",
						minWidth: 150,
						widthGrow: 3,
						responsive: 0,
					},
					{
						title: "Autor",
						field: "author",
						headerFilterPlaceholder: "e.g. Isidor",
						minWidth: 100,
						mutator: jsonpathFlexibleLookup,
						mutatorParams: {
							path: "$[*].name",
							separator: "; ",
						},
						headerFilter: "input",
						widthGrow: 2,
						responsive: 1,
					},

					{
						title: "Genre",
						field: "genre",
						headerFilterPlaceholder: "e.g. Historiographie",
						minWidth: 150,
						mutator: jsonpathFlexibleLookup,
						mutatorParams: { path: "$..value", reverse: true },
						headerFilter: "list",
						headerFilterParams: { valuesLookup: true, clearable: true },
						widthGrow: 1,
						responsive: 2,
					},
					{
						title: "Ãœberlieferung",
						field: "ms_transmission",
						headerFilterPlaceholder: "e.g. Clm. 6380",
						minWidth: 150,
						mutator: jsonpathsDistinctLookup,
						mutatorParams: {
							path: "$..manuscript..value",
							separator: "\n",
						},
						headerFilter: "input",
						formatter: "textarea",
						widthGrow: 1,
						responsive: 2,
					},

					{
						title: "Entstehungsort",
						field: "origPlace",
						headerFilterPlaceholder: "e.g. Reims",
						minWidth: 150,
						mutator: jsonpathFlexibleLookup,
						mutatorParams: { path: "$[*].value", separator: "\n" },
						headerFilter: "input",
						formatter: "textarea",
						responsive: 2,
					},
					{
						title: "Provenienz",
						field: "provenance",
						headerFilterPlaceholder: "e.g. Freising",
						minWidth: 150,
						mutator: jsonpathFlexibleLookup,
						mutatorParams: { path: "$[*].value", separator: "\n" },
						headerFilter: "input",
						formatter: "textarea",
						responsive: 2,
					},
					{
						title: "Datum",
						field: "origDate",
						headerFilterPlaceholder: "e.g. 850, nach 850",
						minWidth: 150,
						// Ensures filtering and sorting work correctly
						accessor: dateAccessor,
						// Formatting the displayed values
						formatter: dateFormatter,
						headerFilter: "input",
						headerFilterFunc: dateRangeFilter,
						responsive: 2,
					},
					{
						title: "Quelle",
						field: "source_text",
						headerFilterPlaceholder: "e.g. Gregor",
						minWidth: 150,
						mutator: jsonpathFlexibleLookup,
						mutatorParams: {
							path: ["$[*].author", "$[*].title"],
							separator: ": ",
						},
						headerFilter: "list",
						headerFilterParams: { valuesLookup: true, clearable: true, sortValuesList: "asc" },
						formatter: "textarea",
						responsive: 2,
					},
				],
			});

			//trigger download of data.csv file
			document.getElementById("download-csv")!.addEventListener("click", function () {
				table.download("csv", "data.csv");
			});

			//trigger download of data.json file
			document.getElementById("download-json")!.addEventListener("click", function () {
				table.download("json", "data.json");
			});

			//trigger download of data.html file
			document.getElementById("download-html")!.addEventListener("click", function () {
				table.download("html", "data.html", { style: true });
			});

			// event listeners set:
			// href to the work detail view page
			table.on("rowClick", function (e, row) {
				var data = row.getData();
				var url = withBasePath(`/works/${data["hit_id"]}`);
				window.open(url, "_self");
			});

			table.on("dataLoaded", function (data) {
				var el = document.getElementById("counter1");
				if (el) {
					el.innerHTML = `${data.length}`;
				}
				var el = document.getElementById("counter2");
				if (el) {
					el.innerHTML = `${data.length}`;
				}
			});

			table.on("dataFiltered", function (filters, data) {
				var el = document.getElementById("counter1");
				if (el) {
					el.innerHTML = `${data.length}`;
				}
				// Extract raw data from each RowComponent
				const filteredData = data.map((row) => row.getData());

				// Extract hit_ids from filtered data
				const filteredHitIds = filteredData.map((row) => row.hit_id);

				// Update the map with the filtered hit_ids
				if (window.updateMapWithFilteredIds) {
					window.updateMapWithFilteredIds(filteredHitIds);
				} else {
					console.warn("Map update function not available");
				}
			});
		});
	</script>
</PageLayout>
