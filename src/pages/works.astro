---
import PageLayout from "../layouts/page-layout.astro";
import TableHead from "../components/table-head.astro";
---

<PageLayout title="Works">
	<TableHead title="Werke" />

	<script>
		import { TabulatorFull as Tabulator } from "tabulator-tables";
		import "tabulator-tables/dist/css/tabulator_semanticui.min.css";
		import data from "../content/data/works.json";
		import {
			jsonpathLookup,
			dateRangeFilter,
			jsonpathDistinctLookup,
			jsonpathsDistinctRanges,
			jsonpathsDistinctLookup,
		} from "../lib/tabulator-utils.js";
		import { withBasePath } from "../lib/withBasePath";
		import hands_Json from "../content/data/hands.json";
		// preprocess works.json and hands.json to get all necessary data for fields
		// add yearRange to handsJson to easy handle dates as numbers
		const handsJson = Object.values(hands_Json).map((hand) => ({
			...hand,
			hands_dated: hand.hands_dated.map((date) => ({
				...date,
				dated: date.dated.map((i) => ({
					...i,
					yearRange: {
						start: i.not_before ? new Date(i.not_before).getFullYear() : null,
						end: i.not_after ? new Date(i.not_after).getFullYear() : null,
					},
				})),
			})),
		}));
		// hands -> hands_dated. Need matchedHands - hands with role Schreiber to msItem with
		// titlework id === work.id
		// Combine the two datasets
		const tabledata = Object.values(data).map((work) => {
			const matchingOrigHands = handsJson.filter((hand) =>
				hand.hands_role.some(
					(handRole) =>
						handRole.ms_item.some((item) =>
							item.title_work.some((titleWork) => titleWork.hit_id === work.hit_id),
						) && handRole.role.some((ro) => ro.value === "Schreiber"),
				),
			);
			// get the scribe hands again for using in column Schreiberort:
			const matchingPlaces = matchingOrigHands.flatMap(
				(hand) => hand.hands_placed?.flatMap((place) => place.place.map((p) => p.name)) || [],
			);
			// duplicate object 'decoration' from works.json to use as separate field
			const decoration = work.related__ms_items.map((relItem) =>
				relItem.decoration.map((deco) => deco.value).join(" | "),
			);

			return {
				...work,
				origHands: matchingOrigHands,
				origPlaces: [...new Set(matchingPlaces)], // get rid of duplicates
				decoWork: [...new Set(decoration)],
			};
		});

		var table = new Tabulator("#tabulator-table", {
			headerFilterLiveFilterDelay: 600,
			height: 900,
			data: tabledata,
			responsiveLayout: true,
			initialSort: [{ column: "view_label", dir: "asc" }],
			columns: [
				{
					title: "Titel",
					field: "view_label",
					headerFilter: "input",
					formatter: "textarea",
					minWidth: 150,
					widthGrow: 3,
					responsive: 0,
				},
				{
					title: "Autor",
					field: "author",
					minWidth: 100,
					mutator: jsonpathLookup,
					mutatorParams: {
						path: "$[*].name",
						separator: "; ",
					},
					headerFilter: "input",
					widthGrow: 2,
					responsive: 1,
				},

				{
					title: "Genre",
					field: "genre",
					minWidth: 150,
					mutator: jsonpathLookup,
					mutatorParams: { path: "$..genre", reverse: true },
					headerFilter: "list",
					headerFilterParams: { valuesLookup: true, clearable: true },
					widthGrow: 1,
					responsive: 2,
				},
				{
					title: "Überlieferung: HSS",
					field: "related__ms_items",
					minWidth: 150,
					mutator: jsonpathDistinctLookup,
					mutatorParams: {
						path: "$..manuscript..shelfmark..value",
						separator: "\n ",
					},
					headerFilter: "input",
					formatter: "textarea",
					widthGrow: 1,
					responsive: 2,
				},
				{
					title: "Ort der Überlieferung",
					field: "origPlaces",
					minWidth: 150,
					mutator: jsonpathDistinctLookup,
					mutatorParams: { path: "$[*]" },
					headerFilter: "input",
					responsive: 2,
				},
				{
					title: "Datum der Überlieferung",
					field: "origHands",
					minWidth: 150,
					mutator: jsonpathsDistinctRanges,
					mutatorParams: {
						paths: ["$[*].hands_dated[*].dated[*].yearRange"],
						separator: ", ",
					},
					headerFilter: "input",
					headerFilterFunc: dateRangeFilter,
					headerFilterFuncParams: {
						paths: [
							"$[*].hands_dated[*].dated[*].yearRange.start",
							"$[*].hands_dated[*].dated[*].yearRange.end",
						],
					},
					formatter: "textarea",
					responsive: 2,
				},
				{
					title: "HSS Dekoration",
					field: "decoWork",
					minWidth: 100,
					mutator: jsonpathDistinctLookup,
					mutatorParams: { path: "$[*]", separator: " | " },
					headerFilter: "input",
					responsive: 2,
				},
				{
					title: "Quelle",
					field: "source_text",
					minWidth: 150,
					mutator: jsonpathsDistinctLookup,
					mutatorParams: {
						paths: ["$[*].author[*].value", "$[*].title"],
						separator: ": ",
					},
					headerFilter: "list",
					headerFilterParams: { valuesLookup: true, clearable: true, sortValuesList: "asc" },
					formatter: "textarea",
					responsive: 2,
				},
			],
		});

		//trigger download of data.csv file
		document.getElementById("download-csv")!.addEventListener("click", function () {
			table.download("csv", "data.csv");
		});

		//trigger download of data.json file
		document.getElementById("download-json")!.addEventListener("click", function () {
			table.download("json", "data.json");
		});

		//trigger download of data.html file
		document.getElementById("download-html")!.addEventListener("click", function () {
			table.download("html", "data.html", { style: true });
		});

		// event listeners set:
		// href to the work detail view page
		table.on("rowClick", function (e, row) {
			var data = row.getData();
			var url = withBasePath(`/works/${data["hit_id"]}`);
			window.open(url, "_self");
		});

		table.on("dataLoaded", function (data) {
			var el = document.getElementById("counter1");
			if (el) {
				el.innerHTML = `${data.length}`;
			}
			var el = document.getElementById("counter2");
			if (el) {
				el.innerHTML = `${data.length}`;
			}
		});

		table.on("dataFiltered", function (filters, data) {
			var el = document.getElementById("counter1");
			if (el) {
				el.innerHTML = `${data.length}`;
			}
		});
	</script>
</PageLayout>
